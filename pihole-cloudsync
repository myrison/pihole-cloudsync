#!/bin/bash

###########################################################################
# pihole-cloudsync
# Helper script to keep multiple Pi-holes' lists synchronized via Git

# Steve Jenkins (stevejenkins.com)
# https://github.com/stevejenkins/pihole-cloudsync

version='6.0.0'

# SETUP
# Follow the instructions in the README to set up your own private Git
# repository BEFORE running this script for the first time. This script
# will not work without a properly configured Git repo and credentials.

# USAGE: pihole-cloudsync <option>

# OPTIONS:
#  --initpush        Initialize Primary Pi-hole in "Push" mode
#  --initpull        Initialize Secondary Pi-hole in "Pull" mode
#  --push, --upload, --up, -u    Push (upload) your Pi-hole lists to a remote Git repo
#  --pull, --download, --down, -d  Pull (download) your lists from a remote Git repo
#  --help, -h, -?      Show the current version of pihole-cloudsync
#  --version, -v      Show version number

# EXAMPLES:
#  'pihole-cloudsync --push' will push (upload) your lists to a remote Git repo
#  'pihole-cloudsync --pull' will pull (download) your lists from a remote Git repo

# Project Home: https://github.com/stevejenkins/pihole-cloudsync
###########################################################################
# CONSTANTS
personal_git_dir='/var/pihole-cloudsync'
git_branch='main'
git_remote=''
action='pull'
do_init=0
pihole_dir='/etc/pihole'
gravity_db='/etc/pihole/gravity.db'
dnsmasq_dir='/etc/dnsmasq.d'
ad_list='adlist.csv'
custom_list='custom.list'
domain_list='domainlist.csv'
cname_list='05-pihole-custom-cname.conf'
###########################################################################
# SHOULDN'T NEED TO EDIT BELOW THIS LINE

# Force sudo if not running with root privileges
SUDO=''
if [ "$EUID" -ne 0 ]; then
	SUDO='sudo'
fi

# Attempt to detect pihole running in Docker
DOCKER=''
DOCKER_CMD="$(command -v docker)"
JQ_CMD="$(command -v jq)"
if [ -n "${DOCKER_CMD}" ]; then
	CONTAINER="$(${DOCKER_CMD} ps -f "ancestor=pihole/pihole" --format "{{.Names}}")"
	if [ -n "${CONTAINER}" ]; then
		if [ -n "${JQ_CMD}" ]; then
			printf 'Found pihole running under Docker container "%s"\n' "${CONTAINER}"

			# shellcheck disable=SC2016
			pihole_dir="$(${DOCKER_CMD} inspect -f "{{json .Mounts}}" "${CONTAINER}" | ${JQ_CMD} -r --arg dir "${pihole_dir}" '.[] | select(.Destination==$dir) | .Source')"
			gravity_db="${pihole_dir}/gravity.db"
			# shellcheck disable=SC2016
			dnsmasq_dir="$(${DOCKER_CMD} inspect -f "{{json .Mounts}}" "${CONTAINER}" | ${JQ_CMD} -r --arg dir "${dnsmasq_dir}" '.[] | select(.Destination==$dir) | .Source')"

			printf 'Found pihole directory mapped to "%s"\n' "${pihole_dir}"
			printf 'Found dnsmasq directory mapped to "%s"\n' "${dnsmasq_dir}"

			DOCKER="${DOCKER_CMD} exec -i ${CONTAINER}"
		else
			printf 'Found Docker container "%s" but jq is not installed\n' "${CONTAINER}"
		fi
	fi
fi

# FUNCTIONS
usage() {
	cat <<- EOF
	Usage: pihole-cloudsync <option>

	Options:
		-u, --push, --upload, --up      Push (upload) your Pi-hole lists to a remote Git repo
		-d, --pull, --download, --down  Pull (download) your lists from a remote Git repo
		-i, --init                      Initialize Pi-hole in requested mode (--push/--pull)
		-b <branch>, --branch <branch>  Use this branch (default: main)
		-r <remote>. --remote <remote>  Use this git remote to initialize for push
		-g <dir>, --destdir <dir>       Use this dir as the git repository location
		-h, --help                      Show this help dialog
		-v, --version                   Show the current version of pihole-cloudsync
EOF
}
version() {
	printf 'pihole-cloudsync v%s\n' "${version}"
}
push_initialize () {
	# Go to Pi-hole directory, exit if doesn't exist
	cd "${pihole_dir}" || exit

	# Verify Custom and CNAME lists exist
	${SUDO} touch "${custom_list}"
	${SUDO} touch "${dnsmasq_dir}/${cname_list}"

	# Copy local Custom and CNAME lists to local Git repo
	${SUDO} cp "${custom_list}" "${personal_git_dir}"
	${SUDO} cp "${dnsmasq_dir}/${cname_list}" "${personal_git_dir}"

	# Go to local Git repo directory
	if [ ! -d "${personal_git_dir}" ]; then
		${SUDO} mkdir "${personal_git_dir}"
	fi
	cd "${personal_git_dir}" || exit

	# Export Ad and Domain lists from Gravity database
	${SUDO} sqlite3 "${gravity_db}" -header -csv "SELECT * FROM adlist" >"${ad_list}"
	${SUDO} sqlite3 "${gravity_db}" -header -csv "SELECT * FROM domainlist" >"${domain_list}"

	# Add all lists to local Git repo
	if [ ! -d ./.git ]; then
		${SUDO} git init
		${SUDO} git remote add origin "${git_remote}"
	fi
	${SUDO} git add .
	rightnow=$(date +"%B %e, %Y %l:%M%p")
	${SUDO} git commit -a -m "Updated ${rightnow}" -q
	${SUDO} git branch -M "${git_branch}"
	${SUDO} git push -q -u origin "${git_branch}"

	printf 'Local Pi-hole initialized in Push mode and first push successfully completed.\n'
	printf 'Future pushes can now be performed with "pihole-cloudsync --push".\n'
}
pull_initialize () {
	# Go to Pi-hole directory, exit if doesn't exist
	cd "${personal_git_dir}" || exit

	# Update local Git repo from remote Git repo
	${SUDO} git remote update > /dev/null

	# Remove -q option if you don't want to run in "quiet" mode
	${SUDO} git fetch --all -q
	${SUDO} git reset --hard "origin/${git_branch}" -q

	# Stop DNS server
	# shellcheck disable=SC2086
	${SUDO} ${DOCKER} service pihole-FTL stop

	# Overwrite local files
	${SUDO} cp "${custom_list}" "${pihole_dir}"
	${SUDO} cp "${cname_list}" "${dnsmasq_dir}"

	# Overwrite local database tables
	${SUDO} sqlite3 "${gravity_db}" "DROP TABLE adlist;"
	${SUDO} sqlite3 "${gravity_db}" -header -csv ".import adlist.csv adlist"
	${SUDO} sqlite3 "${gravity_db}" "DROP TABLE domainlist;"
	${SUDO} sqlite3 "${gravity_db}" -header -csv ".import domainlist.csv domainlist"

	# Restart Pi-hole to pick up changes
	# shellcheck disable=SC2086
	${SUDO} ${DOCKER} pihole -g

	# Display success messages
	printf 'Local Pi-hole initialized in Pull mode and first pull successfully completed\n'
	printf 'Future pulls can now be perfomed with "pihole-cloudsync --pull"\n'
}
push () {
	 # Go to Pi-hole directory, exit if doesn't exist
	cd "${pihole_dir}" || exit

	# Copy local Custom and CNAME lists to local Git repo
	${SUDO} cp "${custom_list}" "${personal_git_dir}"
	${SUDO} cp "${dnsmasq_dir}/${cname_list}" "${personal_git_dir}"

	# Go to local Git repo directory
	cd "${personal_git_dir}" || exit

	# Export Ad and Domain lists from Gravity database
	${SUDO} sqlite3 "${gravity_db}" -header -csv "SELECT * FROM adlist" >"${ad_list}"
	${SUDO} sqlite3 "${gravity_db}" -header -csv "SELECT * FROM domainlist" >"${domain_list}"

	# Compare local files to remote Git repo
	${SUDO} git remote update > /dev/null

	# If local files are different than remote, update remote Git repo
	CHANGED=$(${SUDO} git --work-tree="${personal_git_dir}" status --porcelain)
	if [ -n "${CHANGED}" ]; then
		printf 'Local Pi-hole lists are different than remote Git repo. Updating remote repo...\n';
		rightnow=$(date +"%B %e, %Y %l:%M%p")
		# Remove -q option if you don't want to run in "quiet" mode
		${SUDO} git commit -a -m "Updated ${rightnow}" -q
		${SUDO} git push -q
		printf 'Done!\n';
		exit 0
	else
		# If local files are the same as remote, do nothing and exit
		printf 'Remote Git repo matches local Pi-hole lists. No further action required.\n';
		exit 0
	fi
}
pull () {
	# Go to Pi-hole directory, exit if doesn't exist
	cd "${personal_git_dir}" || exit

	# Update local Git repo from remote Git repo
	${SUDO} git remote update > /dev/null
	CHANGED=$(${SUDO} git log HEAD..origin/${git_branch} --oneline)
	if [ -n "${CHANGED}" ]; then
		printf 'Remote Git repo is different than local Pi-hole lists. Updating local lists...\n';
		# Remove -q option if you don't want to run in "quiet" mode
		${SUDO} git fetch --all -q
		${SUDO} git reset --hard "origin/${git_branch}" -q
		# shellcheck disable=SC2086
		${SUDO} ${DOCKER} service pihole-FTL stop
		${SUDO} cp "${custom_list}" "${pihole_dir}"
		${SUDO} cp "${cname_list}" "${dnsmasq_dir}"
		${SUDO} sqlite3 "${gravity_db}" "DROP TABLE adlist;"
		${SUDO} sqlite3 "${gravity_db}" -header -csv ".import adlist.csv adlist"
		${SUDO} sqlite3 "${gravity_db}" "DROP TABLE domainlist;"
		${SUDO} sqlite3 "${gravity_db}" -header -csv ".import domainlist.csv domainlist"
		# shellcheck disable=SC2086
		${SUDO} ${DOCKER} pihole -g
		printf 'Done!\n';
		exit 0
	else
		printf 'Local Pi-hole lists match remote Git repo. No further action required.\n';
		exit 0
	fi
}

while :
do
	case "${1}" in
		-h | --help)
			usage
			exit 0
			;;
		-v | --version)
			version
			exit 0
			;;
		-b | --branch)
			git_branch="${2}"
			shift 2
			;;
		-r | --remote)
			git_remote="${2}"
			shift 2
			;;
		-i | --init)
			do_init=1
			shift
			;;
		-u | --upload | --push | --up)
			action='push'
			shift
			;;
		-d | --pull | --download | --down)
			action='pull'
			shift
			;;
		-g | --destdir)
			personal_git_dir="${2}"
			shift 2
			;;
		*)
			shift
			break
			;;
	esac
done

# Determine which action to perform (InitPush, InitPull, Push, Pull)
if [ "${action}" = 'push' ]; then
	if [ "${do_init}" = 1 ]; then
		printf 'Initializing local Git repo for Push/Upload.\n'
		push_initialize
	else
		printf 'Running in Push/Upload mode.\n'
		push
	fi
elif [ "${action}" = 'pull' ]; then
	if [ "${do_init}" = 1 ]; then
		printf 'Initializing local Git repo for Pull/Download.\n'
		pull_initialize
	else
		printf 'Running in Pull/Download mode.\n'
		pull
	fi
fi
